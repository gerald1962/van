        -:    0:Source:/home/gerald/github/van/os/os_trap.c
        -:    1:// SPDX-License-Identifier: GPL-2.0
        -:    2:
        -:    3:/*
        -:    4: * Exception handling
        -:    5: *
        -:    6: * Copyright (C) 2021 Gerald Schueller <gerald.schueller@web.de>
        -:    7: */
        -:    8:
        -:    9:/*============================================================================
        -:   10:  IMPORTED INCLUDE REFERENCES
        -:   11:  ============================================================================*/
        -:   12:#include <signal.h>      /* Signal handling of the OS: signal() */
        -:   13:#include "os.h"          /* Operating system: os_sem_create() */
        -:   14:
        -:   15:/*============================================================================
        -:   16:  EXPORTED INCLUDE REFERENCES
        -:   17:  ============================================================================*/
        -:   18:#include "os_private.h"  /* Local interfaces of the OS: os_trap_init() */
        -:   19:
        -:   20:/*============================================================================
        -:   21:  LOCAL NAME CONSTANTS DEFINITIONS
        -:   22:  ============================================================================*/
        -:   23:/*============================================================================
        -:   24:  MACROS
        -:   25:  ============================================================================*/
        -:   26:/*============================================================================
        -:   27:  LOCAL TYPE DEFINITIONS
        -:   28:  ============================================================================*/
        -:   29:/*============================================================================
        -:   30:  LOCAL DATA
        -:   31:  ============================================================================*/
        -:   32:
        -:   33:/* Pointer to the OS configuration */
        -:   34:static os_conf_t *os_conf_p;
        -:   35:
        -:   36:/*============================================================================
        -:   37:  LOCAL FUNCTION PROTOTYPES
        -:   38:  ============================================================================*/
        -:   39:/*============================================================================
        -:   40:  LOCAL FUNCTIONS
        -:   41:  ============================================================================*/
        -:   42:
        -:   43:/**
        -:   44: * os_trap_handler() - catch the signal SIGINT to generate a core dump.
        -:   45: *
        -:   46: * @signo:  Signal number like SIGINT.
        -:   47: *
        -:   48: * Return:	None.
        -:   49: **/
function os_trap_handler called 2 returned 100% blocks executed 40%
        2:   50:void os_trap_handler(int signo)
        -:   51:{
        -:   52:        /* Catch Ctrl-C. */
        2:   53:        if (signo == SIGINT) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   54:                printf("%s: received SIGINT, generate a core dump.\n", F);
call    0 never executed
        -:   55:		
        -:   56:		/* Release critical device resources. */
    #####:   57:		os_shm_ripcord(0);
call    0 never executed
        -:   58:			
    #####:   59:                raise(SIGABRT);
call    0 never executed
        -:   60:        }
        2:   61:}
        -:   62:
        -:   63:/**
        -:   64: * trap_signal_catch() - Install the signal handler to generate a core dump, if
        -:   65: * the programm has been terminated with Ctrl-C.
        -:   66: *
        -:   67: * Return:	None.
        -:   68: **/
function os_trap_catch called 2 returned 100% blocks executed 75%
        2:   69:void os_trap_catch(void)
        -:   70:{
        -:   71:	__sighandler_t ret;
        -:   72:	
        -:   73:        /* Install the signal handler to catch SIGINT. */
        2:   74:        ret = signal(SIGINT, os_trap_handler);
call    0 returned 100%
       2*:   75:	OS_TRAP_IF(ret == SIG_ERR);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        2:   76:}
        -:   77:
        -:   78:/*============================================================================
        -:   79:  EXPORTED FUNCTIONS
        -:   80:  ============================================================================*/
        -:   81:
        -:   82:/**
        -:   83: * os_trap() - force a core dump.
        -:   84: *
        -:   85: * @file:      matches __FILE__.
        -:   86: * @line:      matches __LINE__.
        -:   87: * @function:  matches __FUNCTION__.
        -:   88: *
        -:   89: * Return:	None.
        -:   90: **/
function os_trap called 2 returned 100% blocks executed 62%
        2:   91:void os_trap(char *file, const char *function, unsigned long line)
        -:   92:{
        -:   93:	/* Entry condition. */
        2:   94:	if (file != NULL && function != NULL) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        2:   95:		if (os_strcmp(function, "*coverage*") == 0) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       2*:   96:			OS_TRACE(("*** coverage test at \"%s\", \"%s\", %lu\n",
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
        -:   97:				  file, function, line));
        -:   98:
        -:   99:			/* Test the release of critical device resources. */
        2:  100:			os_shm_ripcord(1);
call    0 returned 100%
        -:  101:			
        -:  102:			/* Test the trap handler. */
        2:  103:			os_trap_handler(SIGUSR1);
call    0 returned 100%
        2:  104:			return;
        -:  105:		}
        -:  106:		else {
    #####:  107:			OS_TRACE(("*** core dump at \"%s\", \"%s\", %lu\n",
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:  108:				  file, function, line));
        -:  109:		}
        -:  110:	}
        -:  111:	
        -:  112:	/* Release critical device resources. */
    #####:  113:	os_shm_ripcord(0);
call    0 never executed
        -:  114:			
        -:  115:	/* Force a core dump. */
    #####:  116:	raise(SIGABRT);
call    0 never executed
        -:  117:}
        -:  118:
        -:  119:
        -:  120:/**
        -:  121: * os_trap_init() - install the signal handler for the core dump.
        -:  122: *
        -:  123: * Return:	None.
        -:  124: **/
function os_trap_init called 2 returned 100% blocks executed 100%
        2:  125:void os_trap_init(os_conf_t *conf)
        -:  126:{
        -:  127:	/* Save the reference to the OS configuration. */
        2:  128:	os_conf_p = conf;
        -:  129:	
        -:  130:	/* Install the signal handler for the core dump. */
        2:  131:	os_trap_catch();
call    0 returned 100%
        2:  132:}
