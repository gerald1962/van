        -:    0:Source:/home/gerald/van_development/van/os/os_string.c
        -:    1:// SPDX-License-Identifier: GPL-2.0
        -:    2:
        -:    3:/*
        -:    4: * Save memory and string functions.
        -:    5: *
        -:    6: * Copyright (C) 2021 Gerald Schueller <gerald.schueller@web.de>
        -:    7: */
        -:    8:
        -:    9:/*============================================================================
        -:   10:  IMPORTED INCLUDE REFERENCES
        -:   11:  ============================================================================*/
        -:   12:#include <string.h>  /* String operations. */
        -:   13:#include "os.h"      /* Operating system: os_sem_create() */
        -:   14:
        -:   15:/*============================================================================
        -:   16:  EXPORTED INCLUDE REFERENCES
        -:   17:  ============================================================================*/
        -:   18:/*============================================================================
        -:   19:  LOCAL NAME CONSTANTS DEFINITIONS
        -:   20:  ============================================================================*/
        -:   21:/*============================================================================
        -:   22:  MACROS
        -:   23:  ============================================================================*/
        -:   24:/*============================================================================
        -:   25:  LOCAL TYPE DEFINITIONS
        -:   26:  ============================================================================*/
        -:   27:/*============================================================================
        -:   28:  LOCAL DATA
        -:   29:  ============================================================================*/
        -:   30:/*============================================================================
        -:   31:  LOCAL FUNCTION PROTOTYPES
        -:   32:  ============================================================================*/
        -:   33:/*============================================================================
        -:   34:  LOCAL FUNCTIONS
        -:   35:  ============================================================================*/
        -:   36:/*============================================================================
        -:   37:  EXPORTED FUNCTIONS
        -:   38:  ============================================================================*/
        -:   39:
        -:   40:/**
        -:   41: * os_memset() - memset with additional assertions.
        -:   42: *
        -:   43: * see memset
        -:   44: **/
function os_memset called 808 returned 100% blocks executed 75%
      808:   45:void *os_memset(void *s, int c, size_t n)
        -:   46:{
        -:   47:	/* Entry condition. */
     808*:   48:	OS_TRAP_IF(s == NULL);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
      808:   49:	return memset(s, c, n);
        -:   50:}
        -:   51:
        -:   52:/**
        -:   53: * os_memcpy() - memset with additional assertions.
        -:   54: *
        -:   55: * see memcpy
        -:   56: **/
function os_memcpy called 1217 returned 100% blocks executed 86%
     1217:   57:void *os_memcpy(void *dest, size_t dest_n, const void *src, size_t src_n)
        -:   58:{
        -:   59:	/* Entry condition. */
    1217*:   60:	OS_TRAP_IF(dest == NULL || src == NULL || src_n < 1 || src_n > dest_n);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
     1218:   61:	return memcpy(dest, src, src_n);
        -:   62:}
        -:   63:
        -:   64:/**
        -:   65: * os_memcmp() - memcmp with additional assertions.
        -:   66: *
        -:   67: * see memccmp
        -:   68: **/
function os_memcmp called 40 returned 100% blocks executed 83%
       40:   69:int os_memcmp(const void *s1, const void *s2, size_t n)
        -:   70:{
        -:   71:	/* Entry condition. */
      40*:   72:	OS_TRAP_IF(s1 == NULL || s2 == NULL || n < 1);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
       40:   73:	return memcmp(s1, s2, n);
        -:   74:}
        -:   75:
        -:   76:/**
        -:   77: * os_strnlen() - strnlen with additional assertions.
        -:   78: *
        -:   79: * see strnlen
        -:   80: **/
function os_strnlen called 650 returned 100% blocks executed 80%
      650:   81:size_t os_strnlen(const char *s, size_t maxlen)
        -:   82:{
        -:   83:	/* Entry condition. */
     650*:   84:	OS_TRAP_IF(s == NULL || maxlen > OS_MAX_STRING_LEN);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
      650:   85:	return strnlen(s, maxlen);
        -:   86:}
        -:   87:
        -:   88:/**
        -:   89: * os_strlen() - strlen with additional assertions.
        -:   90: *
        -:   91: * see strlen
        -:   92: **/
function os_strlen called 102 returned 100% blocks executed 67%
      102:   93:size_t os_strlen(const char *s)
        -:   94:{
        -:   95:	size_t len;
        -:   96:	
        -:   97:	/* Entry condition. */
     102*:   98:	OS_TRAP_IF(s == NULL);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   99:
      102:  100:	len = strlen(s);
        -:  101:
        -:  102:	/* Final condition. */
     102*:  103:	OS_TRAP_IF(len > OS_MAX_STRING_LEN);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  104:
      102:  105:	return len;
        -:  106:}
        -:  107:
        -:  108:/**
        -:  109: * os_strcpy() - strcpy with additional assertions.
        -:  110: *
        -:  111: * see strcpy
        -:  112: **/
function os_strcpy called 648 returned 100% blocks executed 75%
      648:  113:char *os_strcpy(char *dest, int dest_n, const char *src)
        -:  114:{
        -:  115:	size_t src_n;
        -:  116:
        -:  117:	/* Entry condition. */
     648*:  118:	OS_TRAP_IF(dest == NULL || dest_n < 1);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
        -:  119:
        -:  120:	/* Initialize the destination string. */
      648:  121:	*dest = '\0';
        -:  122:
        -:  123:	/* Calculate the length of the source string. */
      648:  124:	src_n = os_strnlen(src, dest_n);
call    0 returned 100%
     648*:  125:	OS_TRAP_IF(src_n >= dest_n);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  126:
      648:  127:	return strcpy(dest, src);
        -:  128:}
        -:  129:
        -:  130:/**
        -:  131: * os_strncmp() - strncmp with additional assertions.
        -:  132: *
        -:  133: * see strncmp
        -:  134: **/
        -:  135:
function os_strncmp called 2 returned 100% blocks executed 83%
        2:  136:int os_strncmp(const char *s1, const char *s2, int n)
        -:  137:{
        -:  138:	/* Entry condition. */
       2*:  139:	OS_TRAP_IF(s1 == NULL || s2 == NULL || n > OS_MAX_STRING_LEN);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
        2:  140:	return strncmp(s1, s2, n);
        -:  141:}
        -:  142:
        -:  143:/**
        -:  144: * os_strcmp() - strcmp with additional assertions.
        -:  145: *
        -:  146: * see strcmp
        -:  147: **/
        -:  148:
function os_strcmp called 6106 returned 100% blocks executed 100%
     6106:  149:int os_strcmp(const char *s1, const char *s2)
        -:  150:{
        -:  151:	/* Entry condition. */
     6106:  152:	OS_TRAP_IF(s1 == NULL || s2 == NULL);
branch  0 taken 100% (fallthrough)
branch  1 taken -0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 returned -400%
     6111:  153:	return strcmp(s1, s2);
        -:  154:}
