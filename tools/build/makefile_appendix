# SPDX-License-Identifier: GPL-2.0
# Makefile for a van program

# Define the pathes for the van system.
VAN_SRC := \
    ${GLOBALPATH}/os

# Define additional include pathes needed to build the battery simulation.
VAN_INC :=  $(addprefix -I, ${VAN_SRC})


# Define the directory for the object files.
ifndef MODULE_OBJDIR 
    MODULE_OBJDIR := ./obj
endif

# Define the directory for the object files.
ifndef MODULE_DEPDIR 
    MODULE_DEPDIR := ./dep
endif

# Define the directory for other output files.
ifndef MODULE_OUTDIR 
    MODULE_OUTDIR := ./out
endif


# Compile flags.
CC_FLAGS := -g -O0 -Wall -Wno-unknown-pragmas

# Linker flags.
LD_FLAGS :=  -g -static -lpthread


# Aggregate variables.
ALL_FILES     :=  ${VAN_FILES}
ALL_INC	      :=  ${VAN_INC}
ALL_CC_FLAGS  :=  ${CC_FLAGS} ${VAN_CC_FLAGS}
ALL_LD_FLAGS  :=  ${LD_FLAGS} ${VAN_LD_FLAGS}


# Derive the objects to be built.
ALL_OBJS      :=  $(addprefix ${MODULE_OBJDIR}/, $(notdir ${ALL_FILES:.c=.o}))


# Define the dependency files.
MODULE_DEPFILES = $(addprefix ${MODULE_DEPDIR}/, $(notdir ${ALL_OBJS:.o=.d}))


ifdef V
  ifeq ("$(origin V)", "command line")
	Q=
  endif
  else
	Q=@
endif
Q=

# Define the search pathes to all source files.
vpath %.c ${VAN_SRC}

.PHONY: all van echosvars makedir depend_all depend tags clean


all: clean makedir depend ${MODULE_OUTDIR}/${MODULE} tags


van: ${MODULE_OUTDIR}/${MODULE}


echovars:
	@echo GLOBALPATH: ${GLOBALPATH}
	@echo MAKEFILES: ${MAKEFILE_LIST}
	@echo "vpath: ${VAN_SRC}"
	@echo "ALL_FILES: ${ALL_FILES}"
	@echo "ALL_OBJS: ${ALL_OBJS}"
	@echo "MODULE_OUTDIR: ${MODULE_OUTDIR}"
	@echo "MODULE_DEPFILES: ${MODULE_DEPFILES}"
	@echo "ALL_CC_FLAGS: ${ALL_CC_FLAGS}"
	@echo "ALL_LD_FLAGS: ${ALL_LD_FLAGS}"


makedir:
	-${Q}mkdir ${MODULE_OBJDIR}
	-${Q}mkdir ${MODULE_OUTDIR}


# Main target
${MODULE_OUTDIR}/${MODULE}: ${ALL_OBJS}
	${Q}echo Linking $@ 
	${Q}gcc ${ALL_OBJS} ${ALL_LD_FLAGS} -o $@


# How to generate an .o file from a .c file
${MODULE_OBJDIR}/%.o:%.c
	${Q}echo Compiling ${notdir $<}
	${Q}gcc -c ${ALL_INC} ${ALL_CC_FLAGS} -o $@ $<


ifeq '${DEPENDENCIES}' 'YES'
    include ${MODULE_DEPFILES}
endif

${MODULE_DEPDIR}:
	-${Q}mkdir ${MODULE_DEPDIR}

${MODULE_DEPDIR}/%.d:%.c
	${Q}gcc -MM -MF $@ -MT $(@F:.d=.o) ${ALL_INC} ${ALL_CC_FLAGS} $<
	${Q}gcc -MM -MT $@ ${ALL_INC} ${ALL_CC_FLAGS} $< >> $@


depend_all: depend
	${Q}make -j -f $(firstword ${MAKEFILE_LIST}) DEPENDENCIES=YES all


depend: ${MODULE_DEPDIR} ${MODULE_DEPFILES}


tags:
	@echo "Generate tag file for Emacs"
	-${Q}find /home/gerald/van -name "*.[ch]" -print | etags -

clean:
	@echo "Removing all output files"
	-${Q}rm -fr ${MODULE_OBJDIR}
	-${Q}rm -fr ${MODULE_DEPDIR}
	-${Q}rm -fr ${MODULE_OUTDIR}
	-${Q}rm -f core TAGS
