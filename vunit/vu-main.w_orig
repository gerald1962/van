@ Here is the experimental prototype of the Van unit test system.

@c
@<Header files@>@/
@<The main program@>

@ License \hfil\break
The GNU General Public License (GPL) is designed for engineers shipping
products with GPL-licensed software:
\vskip 8pt
\noindent {\tt SPDX-License-Identifier: GPL-2.0} \hfil\break
Van unit test system. \hfil\break
Copyright (C) 2022 Gerald Schueller {\tt <gerald.schueller@@web.de>}

@ We include declarations from Van OS - os.h - and Unix.
Below there is some evidence, why we need these interfaces with
justification.

@<Header files@>=
#include "os.h"
#include <stddef.h>
#include <stdbool.h>
#include <errno.h>
#include <limits.h>

@ Header file grounds:
\vskip 8pt
\halign{\indent\tt # \hfil&\quad # \hfil\cr
os.h      & Van Operating system: printf(). \cr
stddef.h  & Standard type definitions: offsetof(). \cr
stdbool.h & C99 allows bool. true is 1 and false is 0. \cr
errno.h   & OS interface errors like ENOMEM=12 or EFAULT=14. \cr
limits.h  & Sizes of integral or integer types: INT\_MIN. \cr}

@ Linux constants.
\vskip 8pt
\noindent {\sl P:} \hfil\break\indent
Van unit prompt. \hfil\vskip 4pt

\noindent {\sl POISON\_POINTER\_DELTA:} \hfil\break\indent
Architectures might want to move the poison pointer offset
into some well-recognized area such as \break\indent
0xdead000000000000, that is also not mappable by user-space exploits. \hfil\vskip 4pt

\noindent {\sl LIST\_POISON1:} \hfil\break
\noindent {\sl LIST\_POISON2:} \hfil\break\indent
These are non-NULL pointers that will result in page faults
under normal circumstances, used to verify \break\indent
that nobody uses non-initialized list entries. \hfil\vskip 4pt

\noindent {\sl \_\_noreturn:} \hfil\break\indent
The noreturn function specifier is used to tell to the compiler that the
function will not return anything. \break\indent
If the program uses some return statement
inside it, the compiler will generate compile time error. \hfil\vskip 4pt

\noindent {\sl REFCOUNT\_SATURATED:} \hfil\vskip 4pt

@ KUnit constants.
\vskip 8pt
\noindent {\sl KUNIT\_LOG\_SIZE:} \hfil\break\indent
Size of log associated with test. \hfil\vskip 4pt

\noindent {\sl KUNIT\_STATUS\_COMMENT\_SIZE:} \hfil\break\indent
Maximum size of a status comment. \hfil\vskip 4pt

\noindent {\sl KUNIT\_PARAM\_DESC\_SIZE:} \hfil\break\indent
Maximum size of parameter description string. \hfil\vskip 4pt

\noindent {\sl KUNIT\_SUBTEST\_INDENT:} \hfil\break\indent
Specification of the subtest stream indentation of 4 spaces for a
sub-subtest. \hfil\vskip 4pt

\noindent {\sl KUNIT\_SUBSUBTEST\_INDENT:} \hfil\break\indent
Specification of the subtest stream indentation of 8 spaces for a
sub-subtest. \hfil\vskip 4pt

\noindent {\sl KUNIT\_CURRENT\_LOC:} \hfil

@ Constants definitions.
\vskip 8pt
@d P "U>"
@d POISON_POINTER_DELTA  0
@d LIST_POISON1  ((void *) 0x100 + POISON_POINTER_DELTA)
@d LIST_POISON2  ((void *) 0x200 + POISON_POINTER_DELTA)
@d __noreturn  __attribute__((__noreturn__))
@d __must_check  __attribute__((__warn_unused_result__))
@d REFCOUNT_SATURATED  (INT_MIN / 2)

@d KUNIT_LOG_SIZE	512
@d KUNIT_STATUS_COMMENT_SIZE  256
@d KUNIT_PARAM_DESC_SIZE  128
@d KUNIT_SUBTEST_INDENT     "    "
@d KUNIT_SUBSUBTEST_INDENT  "        "
@d KUNIT_CURRENT_LOC { .file = __FILE__, .line = __LINE__ }

@ Linux macros.
\vskip 8pt
\noindent {\sl \_\_printk\_index\_emit:} \hfil\break
\noindent {\sl printk\_index\_wrap:} \hfil\break\indent
Some subsystems have their own custom printk that applies a va\_format to a
generic format, for \break\indent
example, to include a device number or other metadata
alongside the format supplied by the caller.

% \noindent {\sl pr\_fmt:} \hfil\break
% \noindent {\sl pr\_info:}
% \noindent {\sl \_\_WARN\_printf:} \hfil\vskip 4pt

% \noindent {\sl WARN\_ON:} \hfil\vskip 4pt

% \noindent {\sl BUG\_ON:} \hfil\vskip 4pt

% \noindent {\sl BUG:} \hfil\vskip 4pt

% \noindent {\sl \_\_same\_type:} \hfil\vskip 4pt

% \noindent {\sl check\_mul\_overflow:} \hfil\vskip 4pt

% \noindent {\sl barrier:} \hfil\vskip 4pt

% \noindent {\sl WARN:} \hfil\vskip 4pt

% \noindent {\sl WARN\_ONCE:} \hfil\vskip 4pt

% \noindent {\sl READ\_ONCE:} \hfil\vskip 4pt

% \noindent {\sl WRITE\_ONCE:} \hfil\vskip 4pt

% \noindent {\sl REFCOUNT_WARN:} \hfil\vskip 4pt

% \noindent {\sl unlikely:} \hfil\vskip 4pt

% \noindent {\sl static\_assert:} \hfil\vskip 4pt

% \noindent {\sl \_\_static\_assert:} \hfil\vskip 4pt

% \noindent {\sl container\_of:} \hfil\vskip 4pt

% \noindent {\sl list\_entry:} \hfil\vskip 4pt

% \noindent {\sl list\_prev\_entry:} \hfil\vskip 4pt

% \noindent {\sl list\_next\_entry:} \hfil\vskip 4pt

% \noindent {\sl list\_last\_entry:} \hfil\vskip 4pt

% \noindent {\sl list\_first\_entry:} \hfil\vskip 4pt

% \noindent {\sl list\_entry\_is\_head:} \hfil\vskip 4pt

% \noindent {\sl list\_for\_each\_entry:} \hfil\vskip 4pt

% \noindent {\sl list\_for\_each\_entry\_reverse:} \hfil\vskip 4pt

% \noindent {\sl list\_for\_each\_entry\_safe:} \hfil\vskip 4pt

% \noindent {\sl \_\_SWAIT\_QUEUE\_HEAD\_INITIALIZER:} \hfil\vskip 4pt

% \noindent {\sl COMPLETION\_INITIALIZER:} \hfil\vskip 4pt

% \noindent {\sl DECLARE\_COMPLETION:} \hfil\vskip 4pt

% \noindent {\sl DECLARE\_COMPLETION\_ONSTACK:} \hfil\vskip 4pt

@ Macro definitions.
\vskip 8pt
@d __printk_index_emit(...)  do {} while (0)

@d printk_index_wrap(_p_func, _fmt, ...) ({				@/
		__printk_index_emit(_fmt, NULL, NULL);			@/
		_p_func(_fmt, ##__VA_ARGS__);				@/
	})

@d printk(fmt, ...)  printk_index_wrap(_printk, fmt, ##__VA_ARGS__)

@d pr_fmt(fmt) "VUnit: " fmt

@d pr_info(fmt, ...)  printk(pr_fmt(fmt), ##__VA_ARGS__)

@d __WARN_printf(arg...)  do { fprintf(stderr, arg); } while (0)

@d WARN_ON(condition) ({					@/
	int __ret_warn_on = !! (condition);			@/
	if (unlikely(__ret_warn_on))				@/
		__WARN_printf("assertion failed at %s:%d\n",	@/
				__FILE__, __LINE__);		@/
	unlikely(__ret_warn_on);				@/
})

@d BUG_ON(cond)  OS_TRAP_IF(! (cond))
@d BUG()	      BUG_ON(1)
@d __same_type(a, b)  __builtin_types_compatible_p(typeof(a), typeof(b))

@d check_mul_overflow(a, b, d) __must_check_overflow(({	@/
	typeof(a) __a = (a);			@/
	typeof(b) __b = (b);			@/
	typeof(d) __d = (d);			@/
	(void) (&__a == &__b);			@/
	(void) (&__a == __d);			@/
	__builtin_mul_overflow(__a, __b, __d);	@/
}))

@ Now we come to the layout of the |main| function. 
@<The main...@>=
void main (void)
{
	printf("Hello.\n");
}

@* Index.
Here is the list of the identifiers used.
